#!/bin/bash

# Import settings
. .git/hooks/_default_settings.sh

if [ -f .git/hooks/_user_defined_settings.sh ]; then
    . .git/hooks/_user_defined_settings.sh
fi


COMMIT_MSG_FILEPATH=$1
COMMIT_MSG_SOURCE=$2


RUN_REBASE=$(git status)
if [[ ${RUN_REBASE} == 'interactive rebase in progress'* ]] ; then
    exit 0
fi

# Figure out which branch we're on
BRANCH=$(git symbolic-ref --short HEAD)


# Get short description, then get 1 word in lowercase from it
BRANCH_CHANGE_1_WORD=$(echo "${BRANCH}" | awk -F "/" '{print $NF}' | \
                       awk -F "_" '{print tolower($1)}')


declare -A CHANGE_1_WORDS=(
    ["add"]="Add"
    ["delete"]="Delete"
    ["change"]="Change"
    ["fix"]="Fix"
    ["update"]="Update"
    ["correct"]="Correct"
    ["test"]="Test"
)

COMMIT_TYPE=${CHANGE_1_WORDS[${BRANCH_CHANGE_1_WORD}]}

if [ -z "${COMMIT_TYPE}" ] ; then
    # Adding default commit message start keyword by branch name
    ISSUE_TYPE=$(echo "${BRANCH}" | cut -d'/' -f1)

    declare -A ISSUE_TYPES=(
        ["feature"]="Add"
        ["improve"]=""
        ["fix"]="Fix"
        ["test"]=""
        ["docs"]=""
        ["style"]="Change"
        ["refactor"]="Refactor"
        ["legacy"]=""
    )

    COMMIT_TYPE=${ISSUE_TYPES[$ISSUE_TYPE]}
fi


# Populate the commit message with the jira issue #, if there is one
ISSUE_TEXT=""

THIRD_ARG=$(echo "${BRANCH}" | cut -s -d'/' -f3)
if [ -n "${THIRD_ARG}" ] ; then
    ISSUE_NAME=$(echo "${BRANCH}" | rev | cut -s -d'/' -f2 | rev)

    repo=$(git remote get-url --push origin 2>/dev/null)

    if [ -z "${repo}" ] ; then
        echo -e \
            "Please, specify remote origin url.\n\n"\
            "git remote add origin git@github.com:USERNAME/REPOSITORY.git"
        exit 1
    fi

    repo=${repo#"git@"}
    repo=${repo%".git"}

    if [[ ${ISSUE_NAME} =~ ${JIRA_REGEX} ]] ; then

        repo=$(echo "${repo}" | cut -s -d':' -f2 | cut -s -d'/' -f1)
        LINK=${JIRA_ISSUE_LINK[${repo}]}

        if [ -z "${LINK}" ] ; then
            LINK="https://${repo}.atlassian.net/browse"
        fi

        ISSUE_TEXT="Issue: ${LINK}/${ISSUE_NAME}"

    elif [[ ${ISSUE_NAME} =~ ${GITHUB_REGEX} ]] ; then
        repo=$(echo "${repo}" | tr ':' '/')

        ISSUE_TEXT="Issue: https://${repo}/issues/${ISSUE_NAME}"
    fi
fi


# Use commit message from `git commit -m`
if [[ $COMMIT_MSG_SOURCE == 'message' ]] ; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILEPATH")

    echo -en "${COMMIT_MSG}\n\n${ISSUE_TEXT}" > "${COMMIT_MSG_FILEPATH}"

    exit 0
fi


echo "${COMMIT_TYPE}

${ISSUE_TEXT}
# Our style guide can be found at: ${STYLE_GUIDE_LINK}

# Each commit message must begin with a capital letter beginning in it's basic form:
# : Add     :
# : Delete  :
# : Change  :
# : Fix     :
# : Update  :
# : Correct :
# : Test    :
# : ...     :
$(cat ${COMMIT_MSG_FILEPATH})" > "${COMMIT_MSG_FILEPATH}"
