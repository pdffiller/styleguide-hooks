#!/bin/bash

# Import functions
. .git/hooks/ask.sh
. .git/hooks/color_echo.sh

# Import settings
. .git/hooks/_default_settings.sh

if [ -f .git/hooks/_user_defined_settings.sh ]; then
    . .git/hooks/_user_defined_settings.sh
fi

###########################
# Branch styleguide check #
###########################

# Figure out which branch we're on
BRANCH=$(git symbolic-ref --quiet --short HEAD)

# Don't check if rebase or any other operation running
IS_BRANCH=$(git branch | grep '\*' | sed 's/\* //')
if [[ "${IS_BRANCH}" == '(no branch'* ]]; then
    exit 0
fi

ISSUE_TYPE=$(echo "${BRANCH}" | cut -d'/' -f1)

ALLOWED_TYPES=(
    feature
    improve
    fix
    test
    docs
    style
    refactor
    legacy
)

type_not_found=1
for i in $(seq 0 $((${#ALLOWED_TYPES[@]} - 1)) ); do
    if [ "${ALLOWED_TYPES[$i]}" == "${ISSUE_TYPE}" ]; then
        type_not_found=0
        break
    fi
done

if [ $type_not_found -ne 0 ] ; then
    printf "Check branch type. Get '${ISSUE_TYPE}' but it should start from "
    printf '"%s" ' "${ALLOWED_TYPES[@]}"
    printf "${FOOTER}"
    exit 1
fi


# Check is branch have any description
DESCRIPTION=$(echo "${BRANCH}" | cut -s -d'/' -f2)

if [ -z "${DESCRIPTION}" ] ; then
    echo -en \
        "Check branch description. In '${BRANCH}' not found any decription\n"\
        "Prefered construction: "\
        "issue_type/issue_ID/short_description${FOOTER}"\
    exit 1
fi


LINES_CHANGED=$(git diff --staged --stat | tail -n 1 | \
                awk '{gsub("[^0-9]", " ")} {changes=$2+$3} {print changes}')

if [ ${LINES_CHANGED} -ge 1000 ]; then
     color_echo "${COLOR_INFO}" "\n" \
        "Too many changes per one commit\n"\
        "Should be less than 1000, but staged ${LINES_CHANGED}"
    if [ "${FORCE_WARNING_TO_ERROR}" != "disabled" ] ||
        ask "Return and split to separate commits?" Y; then
        exit 1
    fi
fi

######################
# Default pre-commit #
######################

git rev-parse --verify HEAD >/dev/null 2>&1;
exitcode=$?

if [ ${exitcode} -eq 0 ]
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
# exec 1>&2


# Note that the use of brackets around a tr range is ok here, (it's
# even required, for portability to Solaris 10's /usr/bin/tr), since
# the square bracket bytes happen to fall in the designated range.
DIFF_BYTE_COUNT="$(git diff --cached --name-only --diff-filter=A -z $against |
    LC_ALL=C tr -d '[ -~]\0' | wc -c)"

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] && [ "${DIFF_BYTE_COUNT}" -ne 0 ]; then
    echo -e \
        "Error: Attempt to add a non-ASCII file name.\n\n"\
        "This can cause problems if you want to work with people on other platforms.\n\n"\
        "To be portable it is advisable to rename the file.\n\n"\
        "If you know what you are doing you can disable this check using:\n\n"\
        "  git config hooks.allownonascii true"
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
git diff-index --check --cached $against --
exitcode=$?

if [ ${exitcode} -ne 0 ] ; then
    SPACE_MSG=true
fi

# Files (not deleted) in the index
FILE_NAMES="$(git diff-index --name-status --cached ${against} | grep -v ^D | cut -c3-)"

for f in ${FILE_NAMES}; do
    if [[ -n $(tail -c 1 "${f}") ]]; then

        if ! [[ "${f}" =~ [.](${IGNORE_NO_NEWLINE_AT_EOF})$ ]]; then

            echo "${f}: No newline at EOF."
            exitcode=1
        fi
    fi
done

if [ ${exitcode} -eq 0 ] && [ -n "${FILE_NAMES}" ]; then
    exit 0
fi

if [ -n "${SPACE_MSG}" ]; then
    color_echo "${COLOR_INFO}" "\n" \
               "Whitespases in files with extentions" \
               "'${IGNORE_TRAILING_SPACE_EXTENTIONS}' will be ignored"
fi


if [ "${INTERACTIVE_MODE}" = "disabled" ] || ask "Fix it and stage?" Y; then
    for f in ${FILE_NAMES}; do
        # Add a linebreak to the file if it doesn't have one
        sed -i '' -e '$a\' "${f}" >/dev/null 2>&1

        # Remove multiple newlines at EOF
        awk '/^$/ {nlstack=nlstack "\n";next;}
            {printf "%s",nlstack; nlstack=""; print;}' \
            "${f}" > "${f}.tmp" && \
            mv "${f}.tmp" "${f}"

        # Not examine text files with next extentions
        if ! [[ "${f}" =~ [.](${IGNORE_TRAILING_SPACE_EXTENTIONS})$ ]]; then
            # Remove trailing whitespace if it exists
            if grep -q "[[:blank:]]$" "${f}"; then
                sed -i "" -e $'s/[ \t]*$//g' "${f}" >/dev/null 2>&1
            fi
        fi

        git add "${f}"
    done
else
    exit 1
fi
